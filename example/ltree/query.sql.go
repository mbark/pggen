// Code generated by pggen. DO NOT EDIT.

package ltree

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	FindTopScienceChildren(ctx context.Context) ([]pgtype.Text, error)
	// FindTopScienceChildrenBatch enqueues a FindTopScienceChildren query into batch to be executed
	// later by the batch.
	FindTopScienceChildrenBatch(batch genericBatch)
	// FindTopScienceChildrenScan scans the result of an executed FindTopScienceChildrenBatch query.
	FindTopScienceChildrenScan(results pgx.BatchResults) ([]pgtype.Text, error)

	FindTopScienceChildrenAgg(ctx context.Context) (pgtype.TextArray, error)
	// FindTopScienceChildrenAggBatch enqueues a FindTopScienceChildrenAgg query into batch to be executed
	// later by the batch.
	FindTopScienceChildrenAggBatch(batch genericBatch)
	// FindTopScienceChildrenAggScan scans the result of an executed FindTopScienceChildrenAggBatch query.
	FindTopScienceChildrenAggScan(results pgx.BatchResults) (pgtype.TextArray, error)

	InsertSampleData(ctx context.Context) (pgconn.CommandTag, error)
	// InsertSampleDataBatch enqueues a InsertSampleData query into batch to be executed
	// later by the batch.
	InsertSampleDataBatch(batch genericBatch)
	// InsertSampleDataScan scans the result of an executed InsertSampleDataBatch query.
	InsertSampleDataScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindLtreeInput(ctx context.Context, inLtree pgtype.Text, inLtreeArray []string) (FindLtreeInputRow, error)
	// FindLtreeInputBatch enqueues a FindLtreeInput query into batch to be executed
	// later by the batch.
	FindLtreeInputBatch(batch genericBatch, inLtree pgtype.Text, inLtreeArray []string)
	// FindLtreeInputScan scans the result of an executed FindLtreeInputBatch query.
	FindLtreeInputScan(results pgx.BatchResults) (FindLtreeInputRow, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver()}
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver() *typeResolver {
	ci := pgtype.NewConnInfo()
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const findTopScienceChildrenSQL = `SELECT path
FROM test
WHERE path <@ 'Top.Science';`

// FindTopScienceChildren implements Querier.FindTopScienceChildren.
func (q *DBQuerier) FindTopScienceChildren(ctx context.Context) ([]pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTopScienceChildren")
	rows, err := q.conn.Query(ctx, findTopScienceChildrenSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindTopScienceChildren: %w", err)
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var item pgtype.Text
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan FindTopScienceChildren row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindTopScienceChildren rows: %w", err)
	}
	return items, err
}

// FindTopScienceChildrenBatch implements Querier.FindTopScienceChildrenBatch.
func (q *DBQuerier) FindTopScienceChildrenBatch(batch genericBatch) {
	batch.Queue(findTopScienceChildrenSQL)
}

// FindTopScienceChildrenScan implements Querier.FindTopScienceChildrenScan.
func (q *DBQuerier) FindTopScienceChildrenScan(results pgx.BatchResults) ([]pgtype.Text, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindTopScienceChildrenBatch: %w", err)
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var item pgtype.Text
		if err := rows.Scan(&item); err != nil {
			return nil, fmt.Errorf("scan FindTopScienceChildrenBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindTopScienceChildrenBatch rows: %w", err)
	}
	return items, err
}

const findTopScienceChildrenAggSQL = `SELECT array_agg(path)
FROM test
WHERE path <@ 'Top.Science';`

// FindTopScienceChildrenAgg implements Querier.FindTopScienceChildrenAgg.
func (q *DBQuerier) FindTopScienceChildrenAgg(ctx context.Context) (pgtype.TextArray, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTopScienceChildrenAgg")
	row := q.conn.QueryRow(ctx, findTopScienceChildrenAggSQL)
	var item pgtype.TextArray
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query FindTopScienceChildrenAgg: %w", err)
	}
	return item, nil
}

// FindTopScienceChildrenAggBatch implements Querier.FindTopScienceChildrenAggBatch.
func (q *DBQuerier) FindTopScienceChildrenAggBatch(batch genericBatch) {
	batch.Queue(findTopScienceChildrenAggSQL)
}

// FindTopScienceChildrenAggScan implements Querier.FindTopScienceChildrenAggScan.
func (q *DBQuerier) FindTopScienceChildrenAggScan(results pgx.BatchResults) (pgtype.TextArray, error) {
	row := results.QueryRow()
	var item pgtype.TextArray
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan FindTopScienceChildrenAggBatch row: %w", err)
	}
	return item, nil
}

const insertSampleDataSQL = `INSERT INTO test
VALUES ('Top'),
       ('Top.Science'),
       ('Top.Science.Astronomy'),
       ('Top.Science.Astronomy.Astrophysics'),
       ('Top.Science.Astronomy.Cosmology'),
       ('Top.Hobbies'),
       ('Top.Hobbies.Amateurs_Astronomy'),
       ('Top.Collections'),
       ('Top.Collections.Pictures'),
       ('Top.Collections.Pictures.Astronomy'),
       ('Top.Collections.Pictures.Astronomy.Stars'),
       ('Top.Collections.Pictures.Astronomy.Galaxies'),
       ('Top.Collections.Pictures.Astronomy.Astronauts');`

// InsertSampleData implements Querier.InsertSampleData.
func (q *DBQuerier) InsertSampleData(ctx context.Context) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertSampleData")
	cmdTag, err := q.conn.Exec(ctx, insertSampleDataSQL)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertSampleData: %w", err)
	}
	return cmdTag, err
}

// InsertSampleDataBatch implements Querier.InsertSampleDataBatch.
func (q *DBQuerier) InsertSampleDataBatch(batch genericBatch) {
	batch.Queue(insertSampleDataSQL)
}

// InsertSampleDataScan implements Querier.InsertSampleDataScan.
func (q *DBQuerier) InsertSampleDataScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertSampleDataBatch: %w", err)
	}
	return cmdTag, err
}

const findLtreeInputSQL = `SELECT
  $1::ltree                   AS ltree,
  -- This won't work, but I'm not quite sure why.
  -- Postgres errors with "wrong element type (SQLSTATE 42804)"
  -- All caps because we use regex to find pggen.arg and it confuses pggen.
  -- PGGEN.arg('in_ltree_array_direct')::ltree[]    AS direct_arr,

  -- The parenthesis around the text[] cast are important. They signal to pggen
  -- that we need a text array that Postgres then converts to ltree[].
  ($2::text[])::ltree[] AS text_arr;`

type FindLtreeInputRow struct {
	Ltree   pgtype.Text      `json:"ltree"`
	TextArr pgtype.TextArray `json:"text_arr"`
}

// FindLtreeInput implements Querier.FindLtreeInput.
func (q *DBQuerier) FindLtreeInput(ctx context.Context, inLtree pgtype.Text, inLtreeArray []string) (FindLtreeInputRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindLtreeInput")
	row := q.conn.QueryRow(ctx, findLtreeInputSQL, inLtree, inLtreeArray)
	var item FindLtreeInputRow
	if err := row.Scan(&item.Ltree, &item.TextArr); err != nil {
		return item, fmt.Errorf("query FindLtreeInput: %w", err)
	}
	return item, nil
}

// FindLtreeInputBatch implements Querier.FindLtreeInputBatch.
func (q *DBQuerier) FindLtreeInputBatch(batch genericBatch, inLtree pgtype.Text, inLtreeArray []string) {
	batch.Queue(findLtreeInputSQL, inLtree, inLtreeArray)
}

// FindLtreeInputScan implements Querier.FindLtreeInputScan.
func (q *DBQuerier) FindLtreeInputScan(results pgx.BatchResults) (FindLtreeInputRow, error) {
	row := results.QueryRow()
	var item FindLtreeInputRow
	if err := row.Scan(&item.Ltree, &item.TextArr); err != nil {
		return item, fmt.Errorf("scan FindLtreeInputBatch row: %w", err)
	}
	return item, nil
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs for unregistered types.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
