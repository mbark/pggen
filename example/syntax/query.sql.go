// Code generated by pggen. DO NOT EDIT.

package syntax

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	// Query to test escaping in generated Go.
	Backtick(ctx context.Context) (string, error)
	// BacktickBatch enqueues a Backtick query into batch to be executed
	// later by the batch.
	BacktickBatch(batch genericBatch)
	// BacktickScan scans the result of an executed BacktickBatch query.
	BacktickScan(results pgx.BatchResults) (string, error)

	// Query to test escaping in generated Go.
	BacktickQuoteBacktick(ctx context.Context) (string, error)
	// BacktickQuoteBacktickBatch enqueues a BacktickQuoteBacktick query into batch to be executed
	// later by the batch.
	BacktickQuoteBacktickBatch(batch genericBatch)
	// BacktickQuoteBacktickScan scans the result of an executed BacktickQuoteBacktickBatch query.
	BacktickQuoteBacktickScan(results pgx.BatchResults) (string, error)

	// Query to test escaping in generated Go.
	BacktickNewline(ctx context.Context) (string, error)
	// BacktickNewlineBatch enqueues a BacktickNewline query into batch to be executed
	// later by the batch.
	BacktickNewlineBatch(batch genericBatch)
	// BacktickNewlineScan scans the result of an executed BacktickNewlineBatch query.
	BacktickNewlineScan(results pgx.BatchResults) (string, error)

	// Query to test escaping in generated Go.
	BacktickDoubleQuote(ctx context.Context) (string, error)
	// BacktickDoubleQuoteBatch enqueues a BacktickDoubleQuote query into batch to be executed
	// later by the batch.
	BacktickDoubleQuoteBatch(batch genericBatch)
	// BacktickDoubleQuoteScan scans the result of an executed BacktickDoubleQuoteBatch query.
	BacktickDoubleQuoteScan(results pgx.BatchResults) (string, error)

	// Query to test escaping in generated Go.
	BacktickBackslashN(ctx context.Context) (string, error)
	// BacktickBackslashNBatch enqueues a BacktickBackslashN query into batch to be executed
	// later by the batch.
	BacktickBackslashNBatch(batch genericBatch)
	// BacktickBackslashNScan scans the result of an executed BacktickBackslashNBatch query.
	BacktickBackslashNScan(results pgx.BatchResults) (string, error)

	// Illegal names.
	IllegalNameSymbols(ctx context.Context, helloWorld string) (IllegalNameSymbolsRow, error)
	// IllegalNameSymbolsBatch enqueues a IllegalNameSymbols query into batch to be executed
	// later by the batch.
	IllegalNameSymbolsBatch(batch genericBatch, helloWorld string)
	// IllegalNameSymbolsScan scans the result of an executed IllegalNameSymbolsBatch query.
	IllegalNameSymbolsScan(results pgx.BatchResults) (IllegalNameSymbolsRow, error)

	// Space after pggen.arg
	SpaceAfter(ctx context.Context, space string) (string, error)
	// SpaceAfterBatch enqueues a SpaceAfter query into batch to be executed
	// later by the batch.
	SpaceAfterBatch(batch genericBatch, space string)
	// SpaceAfterScan scans the result of an executed SpaceAfterBatch query.
	SpaceAfterScan(results pgx.BatchResults) (string, error)

	// Enum named 123.
	BadEnumName(ctx context.Context) (UnnamedEnum123, error)
	// BadEnumNameBatch enqueues a BadEnumName query into batch to be executed
	// later by the batch.
	BadEnumNameBatch(batch genericBatch)
	// BadEnumNameScan scans the result of an executed BadEnumNameBatch query.
	BadEnumNameScan(results pgx.BatchResults) (UnnamedEnum123, error)

	GoKeyword(ctx context.Context, go_ string) (string, error)
	// GoKeywordBatch enqueues a GoKeyword query into batch to be executed
	// later by the batch.
	GoKeywordBatch(batch genericBatch, go_ string)
	// GoKeywordScan scans the result of an executed GoKeywordBatch query.
	GoKeywordScan(results pgx.BatchResults) (string, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver()}
}

// UnnamedEnum123 represents the Postgres enum "123".
type UnnamedEnum123 string

const (
	UnnamedEnum123InconvertibleEnumName UnnamedEnum123 = "inconvertible_enum_name"
	UnnamedEnum123UnnamedLabel1         UnnamedEnum123 = ""
	UnnamedEnum123UnnamedLabel2111      UnnamedEnum123 = "111"
	UnnamedEnum123UnnamedLabel3         UnnamedEnum123 = "!!"
)

func (u UnnamedEnum123) String() string { return string(u) }

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver() *typeResolver {
	ci := pgtype.NewConnInfo()
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const backtickSQL = "SELECT '`';"

// Backtick implements Querier.Backtick.
func (q *DBQuerier) Backtick(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "Backtick")
	row := q.conn.QueryRow(ctx, backtickSQL)
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query Backtick: %w", err)
	}
	return item, nil
}

// BacktickBatch implements Querier.BacktickBatch.
func (q *DBQuerier) BacktickBatch(batch genericBatch) {
	batch.Queue(backtickSQL)
}

// BacktickScan implements Querier.BacktickScan.
func (q *DBQuerier) BacktickScan(results pgx.BatchResults) (string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan BacktickBatch row: %w", err)
	}
	return item, nil
}

const backtickQuoteBacktickSQL = "SELECT '`\"`';"

// BacktickQuoteBacktick implements Querier.BacktickQuoteBacktick.
func (q *DBQuerier) BacktickQuoteBacktick(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "BacktickQuoteBacktick")
	row := q.conn.QueryRow(ctx, backtickQuoteBacktickSQL)
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query BacktickQuoteBacktick: %w", err)
	}
	return item, nil
}

// BacktickQuoteBacktickBatch implements Querier.BacktickQuoteBacktickBatch.
func (q *DBQuerier) BacktickQuoteBacktickBatch(batch genericBatch) {
	batch.Queue(backtickQuoteBacktickSQL)
}

// BacktickQuoteBacktickScan implements Querier.BacktickQuoteBacktickScan.
func (q *DBQuerier) BacktickQuoteBacktickScan(results pgx.BatchResults) (string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan BacktickQuoteBacktickBatch row: %w", err)
	}
	return item, nil
}

const backtickNewlineSQL = "SELECT '`\n';"

// BacktickNewline implements Querier.BacktickNewline.
func (q *DBQuerier) BacktickNewline(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "BacktickNewline")
	row := q.conn.QueryRow(ctx, backtickNewlineSQL)
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query BacktickNewline: %w", err)
	}
	return item, nil
}

// BacktickNewlineBatch implements Querier.BacktickNewlineBatch.
func (q *DBQuerier) BacktickNewlineBatch(batch genericBatch) {
	batch.Queue(backtickNewlineSQL)
}

// BacktickNewlineScan implements Querier.BacktickNewlineScan.
func (q *DBQuerier) BacktickNewlineScan(results pgx.BatchResults) (string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan BacktickNewlineBatch row: %w", err)
	}
	return item, nil
}

const backtickDoubleQuoteSQL = "SELECT '`\"';"

// BacktickDoubleQuote implements Querier.BacktickDoubleQuote.
func (q *DBQuerier) BacktickDoubleQuote(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "BacktickDoubleQuote")
	row := q.conn.QueryRow(ctx, backtickDoubleQuoteSQL)
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query BacktickDoubleQuote: %w", err)
	}
	return item, nil
}

// BacktickDoubleQuoteBatch implements Querier.BacktickDoubleQuoteBatch.
func (q *DBQuerier) BacktickDoubleQuoteBatch(batch genericBatch) {
	batch.Queue(backtickDoubleQuoteSQL)
}

// BacktickDoubleQuoteScan implements Querier.BacktickDoubleQuoteScan.
func (q *DBQuerier) BacktickDoubleQuoteScan(results pgx.BatchResults) (string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan BacktickDoubleQuoteBatch row: %w", err)
	}
	return item, nil
}

const backtickBackslashNSQL = "SELECT '`\\n';"

// BacktickBackslashN implements Querier.BacktickBackslashN.
func (q *DBQuerier) BacktickBackslashN(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "BacktickBackslashN")
	row := q.conn.QueryRow(ctx, backtickBackslashNSQL)
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query BacktickBackslashN: %w", err)
	}
	return item, nil
}

// BacktickBackslashNBatch implements Querier.BacktickBackslashNBatch.
func (q *DBQuerier) BacktickBackslashNBatch(batch genericBatch) {
	batch.Queue(backtickBackslashNSQL)
}

// BacktickBackslashNScan implements Querier.BacktickBackslashNScan.
func (q *DBQuerier) BacktickBackslashNScan(results pgx.BatchResults) (string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan BacktickBackslashNBatch row: %w", err)
	}
	return item, nil
}

const illegalNameSymbolsSQL = "SELECT '`\\n' as \"$\", $1 as \"foo.bar!@#$%&*()\"\"--+\";"

type IllegalNameSymbolsRow struct {
	UnnamedColumn0 string `json:"$"`
	FooBar         string `json:"foo.bar!@#$%&*()\"--+"`
}

// IllegalNameSymbols implements Querier.IllegalNameSymbols.
func (q *DBQuerier) IllegalNameSymbols(ctx context.Context, helloWorld string) (IllegalNameSymbolsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "IllegalNameSymbols")
	row := q.conn.QueryRow(ctx, illegalNameSymbolsSQL, helloWorld)
	var item IllegalNameSymbolsRow
	if err := row.Scan(&item.UnnamedColumn0, &item.FooBar); err != nil {
		return item, fmt.Errorf("query IllegalNameSymbols: %w", err)
	}
	return item, nil
}

// IllegalNameSymbolsBatch implements Querier.IllegalNameSymbolsBatch.
func (q *DBQuerier) IllegalNameSymbolsBatch(batch genericBatch, helloWorld string) {
	batch.Queue(illegalNameSymbolsSQL, helloWorld)
}

// IllegalNameSymbolsScan implements Querier.IllegalNameSymbolsScan.
func (q *DBQuerier) IllegalNameSymbolsScan(results pgx.BatchResults) (IllegalNameSymbolsRow, error) {
	row := results.QueryRow()
	var item IllegalNameSymbolsRow
	if err := row.Scan(&item.UnnamedColumn0, &item.FooBar); err != nil {
		return item, fmt.Errorf("scan IllegalNameSymbolsBatch row: %w", err)
	}
	return item, nil
}

const spaceAfterSQL = `SELECT $1;`

// SpaceAfter implements Querier.SpaceAfter.
func (q *DBQuerier) SpaceAfter(ctx context.Context, space string) (string, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "SpaceAfter")
	row := q.conn.QueryRow(ctx, spaceAfterSQL, space)
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query SpaceAfter: %w", err)
	}
	return item, nil
}

// SpaceAfterBatch implements Querier.SpaceAfterBatch.
func (q *DBQuerier) SpaceAfterBatch(batch genericBatch, space string) {
	batch.Queue(spaceAfterSQL, space)
}

// SpaceAfterScan implements Querier.SpaceAfterScan.
func (q *DBQuerier) SpaceAfterScan(results pgx.BatchResults) (string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan SpaceAfterBatch row: %w", err)
	}
	return item, nil
}

const badEnumNameSQL = `SELECT 'inconvertible_enum_name'::"123";`

// BadEnumName implements Querier.BadEnumName.
func (q *DBQuerier) BadEnumName(ctx context.Context) (UnnamedEnum123, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "BadEnumName")
	row := q.conn.QueryRow(ctx, badEnumNameSQL)
	var item UnnamedEnum123
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query BadEnumName: %w", err)
	}
	return item, nil
}

// BadEnumNameBatch implements Querier.BadEnumNameBatch.
func (q *DBQuerier) BadEnumNameBatch(batch genericBatch) {
	batch.Queue(badEnumNameSQL)
}

// BadEnumNameScan implements Querier.BadEnumNameScan.
func (q *DBQuerier) BadEnumNameScan(results pgx.BatchResults) (UnnamedEnum123, error) {
	row := results.QueryRow()
	var item UnnamedEnum123
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan BadEnumNameBatch row: %w", err)
	}
	return item, nil
}

const goKeywordSQL = `SELECT $1::text;`

// GoKeyword implements Querier.GoKeyword.
func (q *DBQuerier) GoKeyword(ctx context.Context, go_ string) (string, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GoKeyword")
	row := q.conn.QueryRow(ctx, goKeywordSQL, go_)
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query GoKeyword: %w", err)
	}
	return item, nil
}

// GoKeywordBatch implements Querier.GoKeywordBatch.
func (q *DBQuerier) GoKeywordBatch(batch genericBatch, go_ string) {
	batch.Queue(goKeywordSQL, go_)
}

// GoKeywordScan implements Querier.GoKeywordScan.
func (q *DBQuerier) GoKeywordScan(results pgx.BatchResults) (string, error) {
	row := results.QueryRow()
	var item string
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan GoKeywordBatch row: %w", err)
	}
	return item, nil
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs for unregistered types.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
