// Code generated by pggen. DO NOT EDIT.

package pgcrypto

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	CreateUser(ctx context.Context, email string, password string) (pgconn.CommandTag, error)
	// CreateUserBatch enqueues a CreateUser query into batch to be executed
	// later by the batch.
	CreateUserBatch(batch genericBatch, email string, password string)
	// CreateUserScan scans the result of an executed CreateUserBatch query.
	CreateUserScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindUser(ctx context.Context, email string) (FindUserRow, error)
	// FindUserBatch enqueues a FindUser query into batch to be executed
	// later by the batch.
	FindUserBatch(batch genericBatch, email string)
	// FindUserScan scans the result of an executed FindUserBatch query.
	FindUserScan(results pgx.BatchResults) (FindUserRow, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver()}
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver() *typeResolver {
	ci := pgtype.NewConnInfo()
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

const createUserSQL = `INSERT INTO "user" (email, pass)
VALUES ($1, crypt($2, gen_salt('bf')));`

// CreateUser implements Querier.CreateUser.
func (q *DBQuerier) CreateUser(ctx context.Context, email string, password string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateUser")
	cmdTag, err := q.conn.Exec(ctx, createUserSQL, email, password)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query CreateUser: %w", err)
	}
	return cmdTag, err
}

// CreateUserBatch implements Querier.CreateUserBatch.
func (q *DBQuerier) CreateUserBatch(batch genericBatch, email string, password string) {
	batch.Queue(createUserSQL, email, password)
}

// CreateUserScan implements Querier.CreateUserScan.
func (q *DBQuerier) CreateUserScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec CreateUserBatch: %w", err)
	}
	return cmdTag, err
}

const findUserSQL = `SELECT email, pass from "user"
where email = $1;`

type FindUserRow struct {
	Email string `json:"email"`
	Pass  string `json:"pass"`
}

// FindUser implements Querier.FindUser.
func (q *DBQuerier) FindUser(ctx context.Context, email string) (FindUserRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindUser")
	row := q.conn.QueryRow(ctx, findUserSQL, email)
	var item FindUserRow
	if err := row.Scan(&item.Email, &item.Pass); err != nil {
		return item, fmt.Errorf("query FindUser: %w", err)
	}
	return item, nil
}

// FindUserBatch implements Querier.FindUserBatch.
func (q *DBQuerier) FindUserBatch(batch genericBatch, email string) {
	batch.Queue(findUserSQL, email)
}

// FindUserScan implements Querier.FindUserScan.
func (q *DBQuerier) FindUserScan(results pgx.BatchResults) (FindUserRow, error) {
	row := results.QueryRow()
	var item FindUserRow
	if err := row.Scan(&item.Email, &item.Pass); err != nil {
		return item, fmt.Errorf("scan FindUserBatch row: %w", err)
	}
	return item, nil
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs for unregistered types.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
